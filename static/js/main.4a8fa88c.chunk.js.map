{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Bar","styled","div","Stat","Spells","Card","Dice","Spacer","App","useState","xp","setXp","gold","setGold","hp","setHp","armor","setArmor","food","setFood","fire","ice","poison","heal","spells","setSpells","area","setArea","monsterHp","setMonsterHp","dungeonFloor","setDungeonFloor","dice","setDice","DungeonLevels","Cards","name","info","activated","rollXd6","numberOfDice","result","total","i","roll","Math","round","random","push","nextFloor","newFloor","floorCards","slice","length","index","splice","genDungeonFloor","className","onClick","floor","map","key","activateArea","p","includes","die","res","newSet","rollDice","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.4a8fa88c.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport styled from 'styled-components';\n\n// styles\nconst Bar = styled.div`\n  background-color: #333;\n  color: #fff;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: space-between;\n`;\n\nconst Stat = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: space-around;\n  width: 100%;\n\n  .name {\n    font-weight: bold;\n  }\n\n  .button {\n    border: 1px solid #333;\n    border-radius: 5px;\n    width: 50px;\n    height: 50px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    &:active {\n      background-color: #ccc;\n    }\n  }\n`;\n\nconst Spells = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: space-between;\n  div {\n    padding-left: 5px;\n  }\n`;\n\nconst Card = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: space-around;\n  width: 100%;\n  min-height: 80px;\n  background-color: #ccc;\n  margin-bottom: 5px;\n`;\n\nconst Dice = styled.div`\n  position: fixed;\n  bottom: 0;\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: space-around;\n  width: 100%;\n  height: 80px;\n  background-color: #fff;\n  color: #333;\n  margin-bottom: 5px;\n  div {\n    border: 1px solid #333;\n    border-radius: 5px;\n    width: 50px;\n    height: 50px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    &:active {\n      background-color: #ccc;\n    }\n  }\n`;\n\nconst Spacer = styled.div`\n  width: 100%;\n  height: 80px;\n`;\n\nconst App = () => {\n  const [xp, setXp] = useState(0);\n  const [gold, setGold] = useState(3);\n  const [hp ,setHp] = useState(5);\n  const [armor, setArmor] = useState(0);\n  const [food, setFood] = useState(6);\n  const [spells, setSpells] = useState({\n    fire: 0,\n    ice: 0,\n    poison: 0,\n    heal: 0,\n  });\n  const [area, setArea] = useState(0);\n  const [monsterHp, setMonsterHp] = useState(0);\n  const [dungeonFloor, setDungeonFloor] = useState([]);\n  const [dice, setDice] = useState([1,1,1,1]);\n\n\n  const DungeonLevels = [1,1,1,2,2,3,3,3,4,4,4,5,5,5,5];\n  const BossAreas = [2, 4, 7, 10, 14]\n  const Cards = [{\n    name: 'Event',\n    info: ['Skill check: 1d6 <= Rank',\n      '1: +1 food',\n      '2: +2 gold',\n      '3: +2 hp',\n      '4: +2 xp',\n      '5: +1 armor',\n      '6: monster dmg: lvlx2 xp: 2',\n    ],\n    activated: false,\n  },{\n    name: 'Trap',\n    info: ['Skill check: 1d6 <= Rank',\n      '1: -1 food',\n      '2: -1 armor',\n      '3: -1 gold',\n      '4: -1 hp',\n      '5: -1 xp',\n      '6: pit: -2hp, fall area below',\n    ],\n    activated: false,\n  },{\n    name: 'Monster',\n    info: ['Hp: Dungeon Area + 1d6',\n      '1 undead soldier dmg: 2 xp: 1',\n      '2 skeleton dmg: 4 xp: 1',\n      '3 undead knight dmg: 6 xp: 2',\n      '4 serpent knight dmg: 8 xp: 2',\n      '5 ogs sanctum guard dmg: 10 xp: 3',\n    ],\n    activated: false,\n  },{\n    name: 'Treasure',\n    info: ['1gp no monster defeated',\n      '2gp if a monster defeated',\n      'roll 1d6: 5+ roll again for item',\n      '1: +1 armor',\n      '2: fireball spell 8dmg',\n      '3: +2 xp',\n      '4: Ice',\n      '5: Poison',\n      '6: Heal',\n    ],\n    activated: false,\n  },{\n    name: 'Resting',\n    info: ['Choose 1',\n      '+1 xp',\n      '+1 food',\n      '+2 hp',\n    ],\n    activated: false,\n  },{\n    name: 'Merchant',\n    info: ['Buy',\n      '1gp +1 food',\n      '1gp +1 hp',\n      '3gp +3 hp',\n      '6gp +1 armor',\n      '8gp +1 spell',\n      'Sell',\n      '3gp 1 armor',\n      '4gp any 1 spell',\n    ],\n    activated: false,\n  }];\n\n\n  const getRank = () => {\n    return Math.floor(xp/6)+1;\n  };\n\n  const rollXd6 = (numberOfDice) => {\n    const result = {\n      dice: [],\n      total: 0,\n    };\n    for (let i = 0; i < numberOfDice; i += 1) {\n      const roll = Math.round(Math.random() * 5) + 1\n      result.dice.push(roll);\n      result.total += roll;\n    }\n    return result;\n  };\n\n  const genEncounter = () => {\n    setMonsterHp(area + rollXd6(1).total);\n  };\n\n  const genDungeonFloor = () => {\n    const newFloor = [];\n    const floorCards = Cards.slice(0);\n    while (floorCards.length > 0) {\n      const index = Math.round(Math.random() * (floorCards.length - 1));\n      newFloor.push(floorCards[index]);\n      floorCards.splice(index, 1);\n    }\n    newFloor[0].activated = true;\n    setDungeonFloor(newFloor);\n  };\n\n  const activateArea = (area) => {\n    const newFloor = dungeonFloor.slice(0);\n    newFloor[area].activated = true;\n    setDungeonFloor(newFloor);\n  };\n\n  const rollDice = (index) => {\n    const res = rollXd6(1);\n    const newSet = dice.splice(0);\n    newSet[index] = res.total;\n    setDice(newSet);\n  };\n\n  const nextFloor = () => {\n    setArea(area + 1);\n    genDungeonFloor();\n  };\n\n  const setBossHp = () => {\n    setMonsterHp((DungeonLevels[area] * 5) + 5);\n  };\n\n\n  return (\n    <div>\n      <Bar>\n        <Stat>\n          <div className=\"name\">\n            HP:\n          </div>\n          <div className=\"button\" onClick={() => {setHp(hp - 1)}}>\n            -\n          </div>\n          <div className=\"stat\">\n            {hp}\n          </div>\n          <div className=\"button\" onClick={() => { setHp(hp + 1) }}>\n            +\n          </div>\n        </Stat>\n        <Stat>\n          <div className=\"name\">\n            XP:\n          </div>\n          <div className=\"button\" onClick={() => { setXp(xp - 1) }}>\n            -\n          </div>\n          <div className=\"stat\">\n            {xp}\n          </div>\n          <div className=\"button\" onClick={() => { setXp(xp + 1) }}>\n            +\n          </div>\n        </Stat>\n        <Stat>\n          <div className=\"name\">\n            GP:\n          </div>\n          <div className=\"button\" onClick={() => { setGold(gold - 1) }}>\n            -\n          </div>\n          <div className=\"stat\">\n            {gold}\n          </div>\n          <div className=\"button\" onClick={() => { setGold(gold + 1) }}>\n            +\n          </div>\n        </Stat>\n        <Stat>\n          <div className=\"name\">\n            Armor:\n          </div>\n          <div className=\"button\" onClick={() => { setArmor(armor - 1) }}>\n            -\n          </div>\n          <div className=\"stat\">\n            {armor}\n          </div>\n          <div className=\"button\" onClick={() => { setArmor(armor + 1) }}>\n            +\n          </div>\n        </Stat>\n        <Stat>\n          <div className=\"name\">\n            Food:\n          </div>\n          <div className=\"button\" onClick={() => { setFood(food - 1) }}>\n            -\n          </div>\n          <div className=\"stat\">\n            {food}\n          </div>\n          <div className=\"button\" onClick={() => { setFood(food + 1) }}>\n            +\n          </div>\n        </Stat>\n        <div>\n          {`Area: ${area} Level: ${DungeonLevels[area]} Rank: ${getRank()}`}\n        </div>\n        <Spells>\n          <Stat>\n            <div className=\"name\">\n              Fire:\n          </div>\n            <div className=\"button\" onClick={() => { setSpells({...spells, fire: spells.fire - 1}) }}>\n              -\n          </div>\n            <div className=\"stat\">\n              {spells.fire}\n            </div>\n            <div className=\"button\" onClick={() => { setSpells({ ...spells, fire: spells.fire + 1 }) }}>\n              +\n          </div>\n          </Stat>\n          <Stat>\n            <div className=\"name\">\n              Ice:\n          </div>\n            <div className=\"button\" onClick={() => { setSpells({ ...spells, ice: spells.ice - 1 }) }}>\n              -\n          </div>\n            <div className=\"stat\">\n              {spells.ice}\n            </div>\n            <div className=\"button\" onClick={() => { setSpells({ ...spells, ice: spells.ice + 1 }) }}>\n              +\n          </div>\n          </Stat>\n          <Stat>\n            <div className=\"name\">\n              Poison:\n          </div>\n            <div className=\"button\" onClick={() => { setSpells({ ...spells, poison: spells.poison - 1 }) }}>\n              -\n          </div>\n            <div className=\"stat\">\n              {spells.poison}\n            </div>\n            <div className=\"button\" onClick={() => { setSpells({ ...spells, poison: spells.poison + 1 }) }}>\n              +\n          </div>\n          </Stat>\n          <Stat>\n            <div className=\"name\">\n              Heal:\n          </div>\n            <div className=\"button\" onClick={() => { setSpells({ ...spells, heal: spells.heal - 1 }) }}>\n              -\n          </div>\n            <div className=\"stat\">\n              {spells.heal}\n            </div>\n            <div className=\"button\" onClick={() => { setSpells({ ...spells, heal: spells.heal + 1 }) }}>\n              +\n          </div>\n          </Stat>\n        </Spells>\n        <Stat>\n          <div className=\"name\">\n            Monster:\n          </div>\n          <div className=\"button\" onClick={() => { setMonsterHp(monsterHp - 1)}}>\n            -\n          </div>\n          <div className=\"stat\">\n            {monsterHp}\n          </div>\n          <div className=\"button\" onClick={() => { genEncounter() }}>\n            Gen\n          </div>\n        </Stat>\n      </Bar>\n      {dungeonFloor.map((floor, index) => (\n        <Card key={index} onClick={() => {activateArea(index)}}>\n          {floor.activated && floor.name}\n          {floor.activated && floor.info.map((p, i) => <p key={`${index}+${i}`}>{p}</p>)}\n        </Card>\n      ))}\n      {BossAreas.includes(area) && (\n        <Card onClick={setBossHp}>\n          <p>Boss Monster</p>\n          <p>1. Undead Giant hp:10 dmg:3 reward: 2gp + 2xp + item</p>\n          <p>2. Undead Giant hp:15 dmg:5 reward: 2gp + 3xp + item</p>\n          <p>3. Undead Giant hp:20 dmg:7 reward: 3gp + 4xp + item</p>\n          <p>4. Undead Giant hp:25 dmg:9 reward: 3gp + 5xp + item</p>\n          <p>5. Undead Giant hp:30 dmg:12 reward: Og's blood</p>\n        </Card>\n      )}\n      <Card onClick={() => nextFloor()}>\n        Gen Floor\n      </Card>\n      <Spacer />\n      <Dice>\n        {dice.map((die, index) => (\n          <div key={index} onClick={() => rollDice(index)}>\n            {die}\n          </div>\n        ))}\n      </Dice>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}